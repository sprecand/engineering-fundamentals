name: Build and Push Docker Image

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        # This step is commented out as it requires specific SonarCloud setup
        # and secrets not provided in this context.
        # It serves as a placeholder as per the original task.
        run: echo "** TASK D.1 - Replace this step with your SonarCloud analysis command (using SonarSource/sonarcloud-github-action@v2.2.0) **"
        # uses: SonarSource/sonarcloud-github-action@v2.2.0
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # with:
        #   projectKey: <your-project-key>
        #   organization: <your-private-sonarcloud-organization>
        #   args: -Dsonar.sources=.

  test:
    needs: code-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Ensure this matches your project's Node.js version

      - name: Install dependencies
        run: npm install

      - name: execute the unit test
        run: npm test # TASK A - Executes the unit tests

  publish-docker-image:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for pushing tags
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true # Fetch existing tags to determine the next version
          token: ${{ secrets.GITHUB_TOKEN }} # Token for pushing tags

      - name: Log in to Azure Container Registry
        run: |
          # TASK B.1 - Log in to Azure Container Registry using admin credentials
          # ACR_USERNAME is typically the name of your ACR when admin user is enabled.
          # The password is provided via GitHub Secret ACR_PASSWORD.
          echo "Logging in to Azure Container Registry: asplreng.azurecr.io"
          docker login asplreng.azurecr.io -u asplreng -p ${{ secrets.ACR_PASSWORD }}
        env:
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }} # Ensure this secret is set in your repo settings

      - name: Generate and Push Git Tag for New Version
        id: versioning
        run: |
          # TASK B.2 - Generate a new Git tag for the Docker image version.
          # Start with version v0.1 resp. increment existing git tag by 0.1.
          # Publish the git tag to the remote repository and store it as an output.

          # Fetch all tags to ensure we have the latest version information
          git fetch --tags

          # Get the latest version tag matching 'vX.Y'
          # If no such tag exists, default to v0.0
          latest_tag=$(git tag --list "v*" | sort -V | tail -n 1)

          current_major=0
          current_minor=0

          if [[ "$latest_tag" =~ ^v([0-9]+)\.([0-9]+)$ ]]; then
              current_major=${BASH_REMATCH[1]}
              current_minor=${BASH_REMATCH[2]}
          fi

          # Increment the minor version
          new_minor=$((current_minor + 1))
          new_tag="v${current_major}.${new_minor}"

          echo "Latest existing tag: ${latest_tag:-'None'}"
          echo "New tag generated: ${new_tag}"

          # Create the new Git tag
          git tag $new_tag

          # Push the new Git tag to the remote repository
          git push origin $new_tag

          # Store the full tag as an output for subsequent steps
          echo "full_tag=${new_tag}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Build the Docker image
        run: |
          # Build the Docker image with both the version tag and 'latest' tag
          docker build -t asplreng.azurecr.io/ipt-spins:${{ steps.versioning.outputs.full_tag }} \
                       -t asplreng.azurecr.io/ipt-spins:latest .

      - name: Push the Docker image to ACR
        run: |
          # TASK B.3 - Push the docker images to the ACR
          # Push both the versioned image and the 'latest' image to ACR
          echo "Pushing asplreng.azurecr.io/ipt-spins:${{ steps.versioning.outputs.full_tag }}"
          docker push asplreng.azurecr.io/ipt-spins:${{ steps.versioning.outputs.full_tag }}
          echo "Pushing asplreng.azurecr.io/ipt-spins:latest"
          docker push asplreng.azurecr.io/ipt-spins:latest

  # PART C - Continuous Deployment
  deploy-to-azure:
    needs: publish-docker-image # This job runs only after the Docker image is published
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_RESOURCEGROUP_CONTRIBUTOR_SERVICEPRINICIPAL }}

      - name: Configure Web App for Private Registry Pull
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp config appsettings set \
              --name ${{ secrets.AZURE_WEBAPP_NAME }} \
              --resource-group asplreng \
              --settings DOCKER_REGISTRY_SERVER_URL="https://asplreng.azurecr.io" \
                         DOCKER_REGISTRY_SERVER_USERNAME="asplreng" \
                         DOCKER_REGISTRY_SERVER_PASSWORD="${{ secrets.ACR_PASSWORD }}"

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }} # Name of your Azure Web App
          resource-group-name: asplreng # Your resource group name
          images: 'asplreng.azurecr.io/ipt-spins:latest' # Image to deploy from your ACR
